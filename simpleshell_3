#include "shell.h"
#include <unistd.h>
#include <stdlib.h>
#include <string.h>
#include <stdio.h>

/**
 * execute_command - Execute an external command.
 * @command: The command to execute.
 * @info: Structure containing potential arguments.
 *
 * Return: 0 on success, -1 on failure.
 */
int execute_command(info_t *info, const char *command)
{
    char *path_env = custom_getenv(info, "PATH");
    char *token, *path;
    char *full_path = NULL;
    pid_t child_pid;
    int status;

    if (path_env == NULL || command == NULL)
        return -1;

    token = strtok(path_env, ":");
    while (token != NULL)
    {
        path = _strcat(token, "/");
        full_path = _strcat(path, command);
        if (access(full_path, X_OK) == 0)
        {
            free(path);
            child_pid = fork();
            if (child_pid == -1)
            {
                perror("fork");
                return -1;
            }
            if (child_pid == 0)
            {
                execve(full_path, info->argv, info->envp);
                perror("execve");
                free(full_path);
                return -1;
            }
            else
            {
                free(full_path);
                wait(&status);
                if (WIFEXITED(status))
                    return WEXITSTATUS(status);
            }
        }
        free(path);
        free(full_path);
        token = strtok(NULL, ":");
    }

    printf("Command not found: %s\n", command);
    return -1;
}
